# Copyright (c) 2011 The LevelDB Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file. See the AUTHORS file for names of contributors.

CC = g++

#-----------------------------------------------
# Uncomment exactly one of the lines labelled (A), (B), and (C) below
# to switch between compilation modes.

OPT ?= -O2 -DNDEBUG       # (A) Production use (optimized mode)
# OPT ?= -g2              # (B) Debug mode, w/ full line-level debugging symbols
# OPT ?= -O2 -g2 -DNDEBUG # (C) Profiling mode: opt, but w/debugging symbols
#-----------------------------------------------

# detect what platform we're building on
$(shell sh ./build_detect_platform)
# this file is generated by build_detect_platform to set build flags
include build_config.mk

# If Snappy is installed, add compilation and linker flags
# (see http://code.google.com/p/snappy/)
ifeq ($(SNAPPY), 1)
SNAPPY_CFLAGS=-DSNAPPY
SNAPPY_LDFLAGS=-lsnappy
else
SNAPPY_CFLAGS=
SNAPPY_LDFLAGS=
endif

# If Google Perf Tools are installed, add compilation and linker flags
# (see http://code.google.com/p/google-perftools/)
ifeq ($(GOOGLE_PERFTOOLS), 1)
GOOGLE_PERFTOOLS_LDFLAGS=-ltcmalloc
else
GOOGLE_PERFTOOLS_LDFLAGS=
endif

libdir=/usr/lib
includedir=/usr/include
pkgconfigdir=$(libdir)/pkgconfig
leveldbincludedir=$(includedir)/leveldb
memenvincludedir=$(includedir)/helpers/memenv
LN_S = /bin/ln -s
MKDIR_P = /bin/mkdir -p
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
LIBTOOL = /usr/bin/libtool
srcdir = .
DESTDIR=$(CURDIR)/debian/tmp
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;

CFLAGS += -c -fPIC -I. -I./include $(PORT_CFLAGS) $(PLATFORM_CFLAGS) $(OPT) $(SNAPPY_CFLAGS)

LDFLAGS += $(PLATFORM_LDFLAGS) $(SNAPPY_LDFLAGS) $(GOOGLE_PERFTOOLS_LDFLAGS)

LIBOBJECTS = \
	./db/builder.o \
	./db/c.o \
	./db/db_impl.o \
	./db/db_iter.o \
	./db/filename.o \
	./db/dbformat.o \
	./db/log_reader.o \
	./db/log_writer.o \
	./db/memtable.o \
	./db/repair.o \
	./db/table_cache.o \
	./db/version_edit.o \
	./db/version_set.o \
	./db/write_batch.o \
	./port/port_posix.o \
	./table/block.o \
	./table/block_builder.o \
	./table/format.o \
	./table/iterator.o \
	./table/merger.o \
	./table/table.o \
	./table/table_builder.o \
	./table/two_level_iterator.o \
	./util/arena.o \
	./util/cache.o \
	./util/coding.o \
	./util/comparator.o \
	./util/crc32c.o \
	./util/env.o \
	./util/env_posix.o \
	./util/hash.o \
	./util/histogram.o \
	./util/logging.o \
	./util/options.o \
	./util/status.o

LEVELDBHEADERFILES = \
	./include/leveldb/slice.h \
	./include/leveldb/write_batch.h \
	./include/leveldb/comparator.h \
	./include/leveldb/table.h \
	./include/leveldb/c.h \
	./include/leveldb/cache.h \
	./include/leveldb/table_builder.h \
	./include/leveldb/status.h \
	./include/leveldb/env.h \
	./include/leveldb/db.h \
	./include/leveldb/options.h \
	./include/leveldb/iterator.h

MEMENVHEADERFILES = \
	./helpers/memenv/memenv.h

pkgconfig_DATA= \
	leveldb.pc \
	memenv.pc

TESTUTIL = ./util/testutil.o
TESTHARNESS = ./util/testharness.o $(TESTUTIL)

TESTS = \
	arena_test \
	c_test \
	cache_test \
	coding_test \
	corruption_test \
	crc32c_test \
	db_test \
	dbformat_test \
	env_test \
	filename_test \
	log_test \
	memenv_test \
	skiplist_test \
	table_test \
	version_edit_test \
	version_set_test \
	write_batch_test

PROGRAMS = db_bench $(TESTS)
BENCHMARKS = db_bench_sqlite3 db_bench_tree_db

#LIBRARY = libleveldb.a
#MEMENVLIBRARY = libmemenv.a
#LIBRARIES = $(LIBRARY) $(MEMENVLIBRARY) libleveldb.so libleveldb.so.0 libleveldb.so.1.1.0 libmemenv.so libmemenv.so.0 libmemenv.so.1.1.0
LIBRARY = libleveldb
MEMENVLIBRARY = libmemenv
#LIBRARIES = $(LIBRARY) $(MEMENVLIBRARY) libleveldb.so.0 libleveldb.so.1.1.0 libmemenv.so.0 libmemenv.so.1.1.0
LIBRARIES = libleveldb.so.1.1.0 libmemenv.so.1.1.0

all: $(LIBRARY) $(MEMENVLIBRARY)
	
install: all install-pkgconfigDATA install-libLEVELDB install-leveldbHeaderFiles install-memenvHeaderFiles

install-libLEVELDB: $(LIBRARIES)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(LIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(libdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(libdir)" || exit $$?; \
	done
	
	cd "$(DESTDIR)$(libdir)" && $(LN_S) libleveldb.so.1.1.0 libleveldb.so
	cd "$(DESTDIR)$(libdir)" && $(LN_S) libleveldb.so.1.1.0 libleveldb.so.0
	cd "$(DESTDIR)$(libdir)" && $(LN_S) libmemenv.so.1.1.0 libmemenv.so
	cd "$(DESTDIR)$(libdir)" && $(LN_S) libmemenv.so.1.1.0 libmemenv.so.0

uninstall-libLEVELDB:
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(LIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	$(am__strip_dir) \
	echo " $(LIBTOOL) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	$(LIBTOOL) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done 

install-pkgconfigDATA: $(pkgconfig_DATA)
	test -z "$(pkgconfigdir)" || $(MKDIR_P) "$(DESTDIR)$(pkgconfigdir)"
	@list='$(pkgconfig_DATA)'; test -n "$(pkgconfigdir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pkgconfigdir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pkgconfigdir)" || exit $$?; \
	done

uninstall-pkgconfigDATA: 
	test -z "$(pkgconfigdir)" || $(MKDIR_P) "$(DESTDIR)$(pkgconfigdir)"
	@list='$(pkgconfig_DATA)'; test -n "$(pkgconfigdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(pkgconfigdir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(pkgconfigdir)" && rm -f $$files

install-leveldbHeaderFiles: $(LEVELDBHEADERFILES)
	test -z "$(leveldbincludedir)" || $(MKDIR_P) "$(DESTDIR)$(leveldbincludedir)"
	@list='$(LEVELDBHEADERFILES)'; test -n "$(leveldbincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(leveldbincludedir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(leveldbincludedir)" || exit $$?; \
	done

uninstall-leveldbHeaderFiles: 
	test -z "$(leveldbincludedir)" || $(MKDIR_P) "$(DESTDIR)$(leveldbincludedir)"
	@list='$(LEVELDBHEADERFILES)'; test -n "$(leveldbincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(leveldbincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(leveldbincludedir)" && rm -f $$files

install-memenvHeaderFiles: $(MEMENVHEADERFILES)
	test -z "$(memenvincludedir)" || $(MKDIR_P) "$(DESTDIR)$(memenvincludedir)"
	@list='$(MEMENVHEADERFILES)'; test -n "$(memenvincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(memenvincludedir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(memenvincludedir)" || exit $$?; \
	done

uninstall-memenvHeaderFiles: 
	test -z "$(memenvincludedir)" || $(MKDIR_P) "$(DESTDIR)$(memenvincludedir)"
	@list='$(MEMENVHEADERFILES)'; test -n "$(memenvincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(memenvincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(memenvincludedir)" && rm -f $$files


check: $(PROGRAMS) $(TESTS)
	for t in $(TESTS); do echo "***** Running $$t"; ./$$t || exit 1; done

clean: uninstall-pkgconfigDATA uninstall-libLEVELDB uninstall-leveldbHeaderFiles uninstall-memenvHeaderFiles
	-rm -f $(PROGRAMS) $(BENCHMARKS) $(LIBRARY) $(MEMENVLIBRARY) $(LIBRARIES) */*.o */*/*.o ios-x86/*/*.o ios-arm/*/*.o
	-rm -rf debian/tmp/*
	-rm -rf ios-x86/* ios-arm/*
	-rm build_config.mk
	-rm -f build_stamp

distclean: clean

$(LIBRARY): $(LIBOBJECTS)
	rm -f $@
	#$(AR) -rs $@ $(LIBOBJECTS)
	$(CC) -shared -Wl,-soname,libleveldb.so -o libleveldb.so.1.1.0 $(LDFLAGS) $(LIBOBJECTS)

db_bench: db/db_bench.o $(LIBOBJECTS) $(TESTUTIL)
	$(CC) $(LDFLAGS) db/db_bench.o $(LIBOBJECTS) $(TESTUTIL) -o $@

db_bench_sqlite3: doc/bench/db_bench_sqlite3.o $(LIBOBJECTS) $(TESTUTIL)
	$(CC) $(LDFLAGS) -lsqlite3 doc/bench/db_bench_sqlite3.o $(LIBOBJECTS) $(TESTUTIL) -o $@

db_bench_tree_db: doc/bench/db_bench_tree_db.o $(LIBOBJECTS) $(TESTUTIL)
	$(CC) $(LDFLAGS) -lkyotocabinet doc/bench/db_bench_tree_db.o $(LIBOBJECTS) $(TESTUTIL) -o $@

arena_test: util/arena_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) util/arena_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

c_test: db/c_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/c_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

cache_test: util/cache_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) util/cache_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

coding_test: util/coding_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) util/coding_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

corruption_test: db/corruption_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/corruption_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

crc32c_test: util/crc32c_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) util/crc32c_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

db_test: db/db_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/db_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

dbformat_test: db/dbformat_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/dbformat_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

env_test: util/env_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) util/env_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

filename_test: db/filename_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/filename_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

log_test: db/log_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/log_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

table_test: table/table_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) table/table_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

skiplist_test: db/skiplist_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/skiplist_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

version_edit_test: db/version_edit_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/version_edit_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

version_set_test: db/version_set_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/version_set_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

write_batch_test: db/write_batch_test.o $(LIBOBJECTS) $(TESTHARNESS)
	$(CC) $(LDFLAGS) db/write_batch_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@

$(MEMENVLIBRARY) : helpers/memenv/memenv.o
	rm -f $@
	#$(AR) -rs $@ helpers/memenv/memenv.o
	$(CC) -shared -Wl,-soname,libmemenv.so -o libmemenv.so.1.1.0 helpers/memenv/memenv.o

memenv_test : helpers/memenv/memenv_test.o $(MEMENVLIBRARY) $(LIBRARY) $(TESTHARNESS)
	$(CC) $(LDFLAGS) helpers/memenv/memenv_test.o $(MEMENVLIBRARY) $(LIBRARY) $(TESTHARNESS) -o $@

ifeq ($(PLATFORM), IOS)
# For iOS, create universal object files to be used on both the simulator and
# a device.
SIMULATORROOT=/Developer/Platforms/iPhoneSimulator.platform/Developer
DEVICEROOT=/Developer/Platforms/iPhoneOS.platform/Developer
IOSVERSION=$(shell defaults read /Developer/Platforms/iPhoneOS.platform/version CFBundleShortVersionString)

.cc.o:
	mkdir -p ios-x86/$(dir $@)
	$(SIMULATORROOT)/usr/bin/$(CC) $(CFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 $< -o ios-x86/$@
	mkdir -p ios-arm/$(dir $@)
	$(DEVICEROOT)/usr/bin/$(CC) $(CFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk -arch armv6 -arch armv7 $< -o ios-arm/$@
	lipo ios-x86/$@ ios-arm/$@ -create -output $@

.c.o:
	mkdir -p ios-x86/$(dir $@)
	$(SIMULATORROOT)/usr/bin/$(CC) $(CFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 $< -o ios-x86/$@
	mkdir -p ios-arm/$(dir $@)
	$(DEVICEROOT)/usr/bin/$(CC) $(CFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk -arch armv6 -arch armv7 $< -o ios-arm/$@
	lipo ios-x86/$@ ios-arm/$@ -create -output $@

else
.cc.o:
	$(CC) $(CFLAGS) $< -o $@

.c.o:
	$(CC) $(CFLAGS) $< -o $@
endif

.PHONY: install-pkgconfigDATA uninstall-pkgconfigDATA install-libLEVELDB uninstall-libLEVELDB install-leveldbHeaderFiles uninstall-leveldbHeaderFiles install-memenvHeaderFiles uninstall-memenvHeaderFiles
